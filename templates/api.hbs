{{>header}}

import { Express } from 'express'
import passport from 'passport'
import * as t from './types'
import * as v from '../../validation'
import { Api } from '../../models'
import { HttpStatusError } from '../../errors'

export default function(app: Express, impl: t.{{className name}}Api) {
	{{#each operations}}
	app.{{lowerCase httpMethod}}(
		{{{stringLiteral (pathTemplate fullPath)}}},
		{{>frag/apiSecurityRequirements}}
		function (req, res, next) {
			try {
				{{#if securityRequirements}}
				const __user = req.user
				if (!__user) {
					return next(HttpStatusError.unauthorized())
				}
				{{/if}}
				{{#if requestBody.defaultContent.schema}}
				function __body() {
					const __contentType = req.get('Content-Type')
					const __mimeType = __contentType ? __contentType.replace(/;.*/, '') : undefined

					{{#with requestBody}}
					{{#each contents}}
					if (__mimeType === '{{{mediaType.mimeType}}}') {
						{{#unless schema}}
						return undefined
						{{else}}
						{{#ifmatch mediaType.mimeType '/json'}}
						return {{>frag/fromJson schema prefix='v.'}}('body', req.body)
						{{else if (isBinary schema)}}
						return req.body as Buffer
						{{else if (isString schema)}}
						return req.body as string
						{{else}}
						return req.body; /* Unsupported mimeType */
						{{/ifmatch}}
						{{/unless}}
					}
					{{/each}}
					{{/with}}
					console.error(`Invalid request content type: ${__contentType}`)
					throw new HttpStatusError(`Invalid request content type: ${__contentType}`, 415)
				}

				{{/if}}
				impl.{{identifier name}}({{!--
				--}}{{#each parameters}}{{>params/query}}{{>params/path}}{{>params/header}}{{>params/form}}{{>params/cookie}}{{#hasMore}}, {{/hasMore}}{{/each}}{{!--
				--}}{{#if requestBody.nativeType}}{{#if parameters}}, {{/if}}{{>params/body}}{{/if}}{{!--
				--}}{{#if securityRequirements}}{{#or parameters requestBody}}, {{/or}}__user{{/if}}{{!--
				--}}).then(function (response) {
					{{#each responses}}
					if (response.status === {{code}}) {
						{{#if defaultContent.schema}}
						let body: any
						try {
							body = {{>frag/toJson defaultContent.schema prefix='v.'}}('response', response.body)
						} catch (error) {
							console.error('Invalid response body in {{identifier ../../name}}.{{identifier ../name}}', error)
							return next(HttpStatusError.for(error))
						}

						{{/if}}
						res.status({{code}})
						{{#if headers}}
						{{#each headers}}
						res.header({{{stringLiteral serializedName}}}, `${response.headers[{{{stringLiteral name}}}]}`)
						{{/each}}
						{{/if}}
						{{#if defaultContent.schema}}
						res.send(body)
						{{else}}
						res.send()
						{{/if}}
						return
					}
					{{/each}}

					console.log('Unsupported response in {{identifier ../name}}.{{identifier name}}', response)
					return next(new HttpStatusError('Unsupported response status code', 500))
				}).catch(function (error) {
					console.error('Unexpected error in {{identifier ../name}}.{{identifier name}}', error.stack || error)
					return next(HttpStatusError.for(error))
				})
			} catch (error) {
				/* Catch validation errors */
				const httpStatusError = HttpStatusError.for(error)
				httpStatusError.statusCode ??= 400
				return next(httpStatusError)
			}
		}
	)

	{{/each}}
}
